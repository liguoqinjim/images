# Image Actions will run in the following scenarios:
# - on Pull Requests containing images (not including forks)
# - on pushing of images to `main` (for forks)
# - on demand (https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/)
# - at 11 PM every Sunday in anything gets missed with any of the above scenarios
# For Pull Requests, the images are added to the PR.
# For other scenarios, a new PR will be opened if any images are compressed.
name: Compress images
on:
  # pull_request:
  #   paths:
  #     - '**.jpg'
  #     - '**.jpeg'
  #     - '**.png'
  #     - '**.webp'
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '**.jpg'
  #     - '**.jpeg'
  #     - '**.png'
  #     - '**.webp'
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: '00 23 * * 0'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: calibreapp/image-actions
    runs-on: ubuntu-latest
    # Only run on main repo on and PRs that match the main repo.
    if: |
      github.repository == 'liguoqinjim/images' &&
      (github.event_name != 'pull_request' ||
       github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2

      - name: Compress Images
        id: calibre
        # uses: calibreapp/image-actions@main
        uses: calibreapp/image-actions@1.3.0
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          # For non-Pull Requests, run in compressOnly mode and we'll PR after.
          compressOnly: ${{ github.event_name != 'pull_request' }}

      - name: Create Pull Request
        id: cpr
        # If it's not a Pull Request then commit any changes as a new PR.
        if: |
          github.event_name != 'pull_request' &&
          steps.calibre.outputs.markdown != ''
        uses: peter-evans/create-pull-request@v3
        with:
          title: Auto Compress Images
          branch-suffix: timestamp
          commit-message: Compress Images
          labels: automerge
          # body: ${{ steps.calibre.outputs.markdown }} 
          body: "成功完成!!!"
      
      - name: Create Habitica Task
        id: cht
        if: |
          github.event_name != 'pull_request' &&
          steps.calibre.outputs.markdown != ''
        env:
          HABITICA_USER_ID: ${{ secrets.HABITICA_USER_ID }}
          HABITICA_API_TOKEN: ${{ secrets.HABITICA_API_TOKEN }}
        run: |
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          JSON_DATA=$(cat << EOF
          {
            "text": "[images库合并PR](https://github.com/liguoqinjim/images/pulls)",
            "type": "todo",
            "priority": 1,
            "checklist": [
              {"text": "合并"},
              {"text": "更新本地库"}
            ],
            "date": "${CURRENT_DATE}"
          }
          EOF
          )
          
          curl -s -X POST "https://habitica.com/api/v3/tasks/user" \
            -H "Content-Type: application/json" \
            -H "x-client: ${HABITICA_USER_ID}-GitHubAction" \
            -H "x-api-user: ${HABITICA_USER_ID}" \
            -H "x-api-key: ${HABITICA_API_TOKEN}" \
            -d "$JSON_DATA"

      # - name: automerge
      #   uses: "pascalgn/automerge-action@v0.14.3"
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      

      # - name: Enable Pull Request Automerge
      #   if: steps.cpr.outputs.pull-request-operation == 'created'
      #   uses: peter-evans/enable-pull-request-automerge@v1
      #   with:
      #     token: ${{ secrets.PAT }}
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      #     merge-method: merge

      - name: Check for root directory images
        id: check_images
        run: |
          # 在根目录查找图片文件
          IMAGE_FILES=$(find . -maxdepth 1 -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.webp" \))
          if [ -n "$IMAGE_FILES" ]; then
            echo "found_images=true" >> $GITHUB_OUTPUT
          else
            echo "found_images=false" >> $GITHUB_OUTPUT
          fi
          echo "Found image files: $IMAGE_FILES"
          
      - name: Send notification to WeChat
        if: ${{ steps.check_images.outputs.found_images == 'true' }}
        env:
          WX_TOKEN: ${{ secrets.WX_TOKEN }}
        run: |
          json_payload=$(printf '{"msgtype": "text", "text": {"content": "请检查图库的上传配置，根目录存在图片文件。"}}')
          curl --location "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WX_TOKEN}" \
            --header 'Content-Type: application/json' \
            --data "$json_payload"
